import chai from 'chai'
import Matrix from './Matrix.mjs'
import MatrixConvolution from './MatrixConvolution.mjs'

describe('MatrixConvolution', function() {
  it('MatrixConvolution using group array of pixels: 6*6*2, step: 1*1, filter: 3*3*2', () => {
    const input = [
      [[10, 20], [40, 20], [40, 10], [50, 60], [10, 40], [90, 10], [90, 10]],
      [[10, 20], [40, 20], [10, 20], [40, 20], [10, 20], [40, 20], [90, 10]],
      [[70, 20], [40, 40], [10, 10], [40, 20], [10, 20], [10, 20], [90, 10]],
      [[10, 20], [20, 20], [10, 10], [30, 20], [10, 20], [20, 20], [90, 10]],
      [[10, 20], [40, 20], [50, 20], [40, 40], [20, 20], [40, 20], [90, 10]],
      [[80, 20], [40, 20], [60, 20], [40, 20], [10, 20], [10, 90], [90, 10]],
    ]

    const filter = [
      [[-1, -1], [-1, -1], [-1, -1]],
      [[-1, -1], [ 8,  8], [-1, -1]],
      [[-1, -1], [-1, -1], [-1, -1]],
    ]

    // ((-1 * 10) + (-1 * 40) + (-1 * 40)) + ((-1 * 10) + (8 * 40) + (-1 * 10)) + ((-1 * 70) + (-1 * 40) + (-1 * 10)) = 90
    // ((-1 * 20) + (-1 * 20) + (-1 * 10)) + ((-1 * 20) + (8 * 20) + (-1 * 20)) + ((-1 * 20) + (-1 * 40) + (-1 * 10)) =  0
    //     ...
    // ((-1 * 10) + (-1 * 20) + (-1 * 90)) + ((-1 * 20) + (8 * 40) + (-1 * 90)) + ((-1 * 10) + (-1 * 10) + (-1 * 90)) =  -20
    // ((-1 * 20) + (-1 * 20) + (-1 * 10)) + ((-1 * 20) + (8 * 20) + (-1 * 10)) + ((-1 * 20) + (-1 * 90) + (-1 * 10)) =  -40

    const w = new MatrixConvolution().create(input, { filter })

    chai.expect(w).to.be.deep.equal([
      [[ 90,    0 ], [ -220,  -40 ], [ 140, -40 ], [ -210, -50 ], [ -80,  20 ]],
      [[ 140, 180 ], [ -150,  -90 ], [ 190,  20 ], [ -120,   0 ], [ -280, 30 ]],
      [[ -80,   0 ], [ -190, -110 ], [ 50,    0 ], [ -130, -20 ], [ -200, 30 ]],
      [[ 40,   10 ], [ 120,   -10 ], [ 90,  170 ], [ -40,  -90 ], [ -20, -40 ]]
    ])
  })

  it('MatrixConvolution using Matrix of pixels: 6*6*2, step: 1*1, filter: 3*3*2', () => {
    const input = [
      10, 20, 40, 20, 40, 10, 50, 60, 10, 40, 90, 10, 90, 10,
      10, 20, 40, 20, 10, 20, 40, 20, 10, 20, 40, 20, 90, 10,
      70, 20, 40, 40, 10, 10, 40, 20, 10, 20, 10, 20, 90, 10,
      10, 20, 20, 20, 10, 10, 30, 20, 10, 20, 20, 20, 90, 10,
      10, 20, 40, 20, 50, 20, 40, 40, 20, 20, 40, 20, 90, 10,
      80, 20, 40, 20, 60, 20, 40, 20, 10, 20, 10, 90, 90, 10,
    ]

    const matrix = new Matrix().create(input, { width: 7, deep: 2 })

    const filter = [
      [[-1, -1], [-1, -1], [-1, -1]],
      [[-1, -1], [ 8,  8], [-1, -1]],
      [[-1, -1], [-1, -1], [-1, -1]],
    ]

    // ((-1 * 10) + (-1 * 40) + (-1 * 40)) + ((-1 * 10) + (8 * 40) + (-1 * 10)) + ((-1 * 70) + (-1 * 40) + (-1 * 10)) = 90
    // ((-1 * 20) + (-1 * 20) + (-1 * 10)) + ((-1 * 20) + (8 * 20) + (-1 * 20)) + ((-1 * 20) + (-1 * 40) + (-1 * 10)) =  0
    //     ...
    // ((-1 * 10) + (-1 * 20) + (-1 * 90)) + ((-1 * 20) + (8 * 40) + (-1 * 90)) + ((-1 * 10) + (-1 * 10) + (-1 * 90)) =  -20
    // ((-1 * 20) + (-1 * 20) + (-1 * 10)) + ((-1 * 20) + (8 * 20) + (-1 * 10)) + ((-1 * 20) + (-1 * 90) + (-1 * 10)) =  -40

    const w = new MatrixConvolution().create(matrix, { filter })

    chai.expect(w).to.be.deep.equal([
      [[ 90,    0 ], [ -220,  -40 ], [ 140, -40 ], [ -210, -50 ], [ -80,  20 ]],
      [[ 140, 180 ], [ -150,  -90 ], [ 190,  20 ], [ -120,   0 ], [ -280, 30 ]],
      [[ -80,   0 ], [ -190, -110 ], [ 50,    0 ], [ -130, -20 ], [ -200, 30 ]],
      [[ 40,   10 ], [ 120,   -10 ], [ 90,  170 ], [ -40,  -90 ], [ -20, -40 ]]
    ])
  })

  it('MatrixConvolution border: 1*1, pixels: 6*6, step: 1*1, filter: 3*3*2', () => {
    const input = [
      [[0,  0], [0,   0], [0,   0], [0,   0], [0,   0], [0,   0], [0,   0], [0,  0]],
      [[0,  0], [10, 20], [40, 20], [10, 20], [40, 20], [10, 20], [40, 20], [0,  0]],
      [[0,  0], [10, 20], [40, 20], [10, 20], [40, 20], [10, 20], [40, 20], [0,  0]],
      [[0,  0], [10, 20], [40, 20], [10, 20], [40, 20], [10, 20], [40, 20], [0,  0]],
      [[0,  0], [10, 20], [40, 20], [10, 20], [40, 20], [10, 20], [40, 20], [0,  0]],
      [[0,  0], [10, 20], [40, 20], [10, 20], [40, 20], [10, 20], [40, 20], [0,  0]],
      [[0,  0], [10, 20], [40, 20], [10, 20], [40, 20], [10, 20], [40, 20], [0,  0]],
      [[0,  0], [0,   0], [0,   0], [0,   0], [0,   0], [0,   0], [0,   0], [0,  0]],
    ]

    const filter = [
      [[-1, -1], [-1, -1], [-1, -1]],
      [[-1, -1], [ 8,  8], [-1, -1]],
      [[-1, -1], [-1, -1], [-1, -1]],
    ]

    const w = new MatrixConvolution().create(input, { filter })

    // ((-1 * 0) + (-1 * 0) + (-1 * 0)) + ((-1 * 0) + (8 * 10) + (-1 * 40)) + ((-1 * 0) + (-1 * 10) + (-1 * 40)) = -10
    // ((-1 * 0) + (-1 * 0) + (-1 * 0)) + ((-1 * 0) + (8 * 20) + (-1 * 20)) + ((-1 * 0) + (-1 * 20) + (-1 * 20)) = 100
    //  ...
    // ((-1 * 10) + (-1 * 40) + (-1 * 0)) + ((-1 * 10) + (8 * 40) + (-1 * 0)) + ((-1 * 0) + (-1 * 0) + (-1 * 0)) = 260
    // ((-1 * 20) + (-1 * 20) + (-1 * 0)) + ((-1 * 20) + (8 * 20) + (-1 * 0)) + ((-1 * 0) + (-1 * 0) + (-1 * 0)) = 100

    chai.expect(w).to.be.deep.equal([
      [[-10,  100], [240,  60], [-90,   60], [240,  60], [-90,   60], [260, 100]],
      [[-60,   60], [180,   0], [-180,   0], [180,   0], [-180,   0], [210,  60]],
      [[-60,   60], [180,   0], [-180,   0], [180,   0], [-180,   0], [210,  60]],
      [[-60,   60], [180,   0], [-180,   0], [180,   0], [-180,   0], [210,  60]],
      [[-60,   60], [180,   0], [-180,   0], [180,   0], [-180,   0], [210,  60]],
      [[-10,  100], [240,  60], [-90,   60], [240,  60], [-90,   60], [260, 100]]
    ])
  })

  it('MatrixConvolution border: 1*1, pixels: 6*6, step: 2*2, filter: 3*3*2', () => {
    const input = [
  /*  ----------------------------                                                                   */
  /*                      ----------------------------                                               */
  /*                                          ----------------------------                           */
  /*     +++       +++       +++       +++       +++       +++       +++      xxx                    */
      [[0,  0], [0,   0], [0,   0], [0,   0], [0,   0], [0,   0], [0,   0], [0,  0]], /*  +++  |     */
      [[0,  0], [10, 20], [40, 20], [10, 20], [40, 20], [10, 20], [40, 20], [0,  0]], /*  +++  |     */
      [[0,  0], [10, 20], [40, 20], [10, 20], [40, 20], [10, 20], [40, 20], [0,  0]], /*  +++  | |   */
      [[0,  0], [10, 20], [40, 20], [10, 20], [40, 20], [10, 20], [40, 20], [0,  0]], /*  +++    |   */
      [[0,  0], [10, 20], [40, 20], [10, 20], [40, 20], [10, 20], [40, 20], [0,  0]], /*  +++    | | */
      [[0,  0], [10, 20], [40, 20], [10, 20], [40, 20], [10, 20], [40, 20], [0,  0]], /*  +++      | */
      [[0,  0], [10, 20], [40, 20], [10, 20], [40, 20], [10, 20], [40, 20], [0,  0]], /*  +++      | */
      [[0,  0], [0,   0], [0,   0], [0,   0], [0,   0], [0,   0], [0,   0], [0,  0]], /*  xxx        */
    ]

    const filter = [
      [[-1, -1], [-1, -1], [-1, -1]],
      [[-1, -1], [ 8,  8], [-1, -1]],
      [[-1, -1], [-1, -1], [-1, -1]],
    ]

    const w = new MatrixConvolution().create(input, { filter, stepX: 2, stepY: 2 })

    // ((-1 * 0) + (-1 * 0) + (-1 * 0)) + ((-1 * 0) + (8 * 10) + (-1 * 40)) + ((-1 * 0) + (-1 * 10) + (-1 * 40)) = -10
    // ((-1 * 0) + (-1 * 0) + (-1 * 0)) + ((-1 * 0) + (8 * 20) + (-1 * 20)) + ((-1 * 0) + (-1 * 20) + (-1 * 20)) = 100
    //  ...
    // ((-1 * 40) + (-1 * 10) + (-1 * 40)) + ((-1 * 40) + (8 * 10) + (-1 * 40)) + ((-1 * 40) + (-1 * 10) + (-1 * 40)) = -180
    // ((-1 * 20) + (-1 * 20) + (-1 * 20)) + ((-1 * 20) + (8 * 20) + (-1 * 20)) + ((-1 * 20) + (-1 * 20) + (-1 * 20)) = 0

    chai.expect(w).to.be.deep.equal([
      [[-10, 100], [-90,  60], [-90,  60]],
      [[-60,  60], [-180,  0], [-180,  0]],
      [[-60,  60], [-180,  0], [-180,  0]]
    ])
  })
})
